/*
Copyright (c) 2024 Seldon Technologies Ltd.

Use of this software is governed BY
(1) the license included in the LICENSE file or
(2) if the license included in the LICENSE file is the Business Source License 1.1,
the Change License after the Change Date as each is defined in accordance with the LICENSE file.
*/
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	clientset "github.com/seldonio/seldon-core/operator/client/machinelearning.seldon.io/v1alpha3/clientset/versioned"
	machinelearningv1alpha3 "github.com/seldonio/seldon-core/operator/client/machinelearning.seldon.io/v1alpha3/clientset/versioned/typed/machinelearning.seldon.io/v1alpha3"
	fakemachinelearningv1alpha3 "github.com/seldonio/seldon-core/operator/client/machinelearning.seldon.io/v1alpha3/clientset/versioned/typed/machinelearning.seldon.io/v1alpha3/fake"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/discovery"
	fakediscovery "k8s.io/client-go/discovery/fake"
	"k8s.io/client-go/testing"
)

// NewSimpleClientset returns a clientset that will respond with the provided objects.
// It's backed by a very simple object tracker that processes creates, updates and deletions as-is,
// without applying any validations and/or defaults. It shouldn't be considered a replacement
// for a real clientset and is mostly useful in simple unit tests.
func NewSimpleClientset(objects ...runtime.Object) *Clientset {
	o := testing.NewObjectTracker(scheme, codecs.UniversalDecoder())
	for _, obj := range objects {
		if err := o.Add(obj); err != nil {
			panic(err)
		}
	}

	cs := &Clientset{tracker: o}
	cs.discovery = &fakediscovery.FakeDiscovery{Fake: &cs.Fake}
	cs.AddReactor("*", "*", testing.ObjectReaction(o))
	cs.AddWatchReactor("*", func(action testing.Action) (handled bool, ret watch.Interface, err error) {
		gvr := action.GetResource()
		ns := action.GetNamespace()
		watch, err := o.Watch(gvr, ns)
		if err != nil {
			return false, nil, err
		}
		return true, watch, nil
	})

	return cs
}

// Clientset implements clientset.Interface. Meant to be embedded into a
// struct to get a default implementation. This makes faking out just the method
// you want to test easier.
type Clientset struct {
	testing.Fake
	discovery *fakediscovery.FakeDiscovery
	tracker   testing.ObjectTracker
}

func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	return c.discovery
}

func (c *Clientset) Tracker() testing.ObjectTracker {
	return c.tracker
}

var _ clientset.Interface = &Clientset{}

// MachinelearningV1alpha3 retrieves the MachinelearningV1alpha3Client
func (c *Clientset) MachinelearningV1alpha3() machinelearningv1alpha3.MachinelearningV1alpha3Interface {
	return &fakemachinelearningv1alpha3.FakeMachinelearningV1alpha3{Fake: &c.Fake}
}
